import sys, os, json
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *


class MyPushButton(QPushButton):
    left_click = pyqtSignal()
    right_click = pyqtSignal()

    def __init__(self, string):
        super().__init__(string)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.left_click.emit()
        elif event.button() == Qt.RightButton:
            self.right_click.emit()

        QPushButton.mousePressEvent(self, event)

class Notes(QWidget):
    def __init__(self):
        super(Notes, self).__init__()

        # self.path = os.getcwd()
        self.path = r"D:\PROGRAMMING\Notes_App\directory_for_notes"
        if not os.path.exists(self.path + r"\MainNote.json"):
            self.create_main_file()

        json_data = json.load(open(self.path + r'\MainNote.json', 'r+'))  # считываем данные с json файла
        jtopy = json.dumps(json_data)
        self.main_dict = json.loads(jtopy)  # КЛАДЕМ ДАННЫЕ В СЛОВАРЬ ГЛАВНОЙ ЗАМЕТКИ

        self.notes_dict_list = []  # СПИСОК С ЗАМЕТКАМИ
        i = 1
        while os.path.exists(self.path + r"\Note" + str(i) + ".json"):
            json_data = json.load(open(self.path + r"\Note" + str(i) + ".json", 'r+'))
            jtopy = json.dumps(json_data)
            note_dict = json.loads(jtopy)
            self.notes_dict_list.append(note_dict)
            i += 1

        self.notes_count = len(self.notes_dict_list)  # КОЛИЧЕСТВО ЗАМЕТОК

        self.initUI()

    def initUI(self):

        # Размеры
        self.setWindowTitle('Note')
        self.setGeometry(300, 300, 600, 400)

        # Первый слой
        self.main_layout = QHBoxLayout()
        self.setLayout(self.main_layout)

        # Левое меню
        self.left_menu = QVBoxLayout()
        self.tree = QTreeWidget()
        self.left_menu.addWidget(self.tree)
        self.left_menu.addStretch()
        self.main_layout.addLayout(self.left_menu)

        # Словарь для хранения заметок по хэштегам
        self.hash_dict = {}
        for i in self.notes_dict_list:
                self.hash_dict.update({i["hashtag"]: []})
        for i in self.notes_dict_list:
            for key in self.hash_dict:
                if i["hashtag"] == key:
                    self.hash_dict[key].append(i["name"])

        # Создание древовидного виджета для заметок по категориям
        self.cycle_for_items()

        # Основная сетка
        self.mainbox = QGridLayout()
        self.main_layout.addLayout(self.mainbox)

        self.note_name = QLabel("MainNote")
        self.mainbox.addWidget(self.note_name)

        self.date_lbl = QLabel("Last Edit: "+ self.main_dict["date"])
        self.mainbox.addWidget(self.date_lbl)

        self.textedit = QTextEdit()
        self.textedit.setFocus() # устанавливает курсор в текстовое поле
        self.mainbox.addWidget(self.textedit)

        # Начальный документ
        doc = QTextDocument()
        doc.setPlainText(self.open_text(r"\MainNote.json"))
        doc.contentsChanged.connect(lambda: self.save_text(r"\MainNote.json"))
        self.textedit.setDocument(doc)

        # -----------------
        # Кнопки

        # Активная на данный момент заметка
        self.active_note_name = 'MainNote'

        # Arrow
        arrowButton = MyPushButton('Main Note')
        self.mainbox.addWidget(arrowButton)
        arrowButton.left_click.connect(lambda: self.show_main_note())
        arrowButton.left_click.connect(lambda: self.func_active_note('MainNote'))

        # Plus
        plusButton = MyPushButton('Plus')
        self.mainbox.addWidget(plusButton)
        plusButton.left_click.connect(lambda: self.new_note())
        plusButton.setShortcut("Ctrl+N")

        # Меню для кнопки-скрепки
        menu_button = QMenu()

        addImage = QAction('Image', self)
        addTable = QAction('Table', self)
        addTable.triggered.connect(lambda: self.add_table())
        addDocument = QAction('Document', self)
        addAudio = QAction('Audio', self)

        menu_button.addAction(addImage)
        menu_button.addAction(addDocument)
        menu_button.addAction(addTable)
        menu_button.addAction(addAudio)
        menu_button.addSeparator()

        menu_button.customContextMenuRequested.connect(lambda: self.show_context_menu())

        # Screpka
        screpButton = MyPushButton('Screpka')
        screpButton.setMenu(menu_button)
        self.mainbox.addWidget(screpButton)

        # Запускаем цикл
        self.cycle_all_notes()

    def cycle_for_items(self): # ЗАНОВО СОЗДАЕТ ЗАМЕТКИ В ЛЕВОМ МЕНЮ ПО КАТЕГОРИЯМ
        items_lst = []
        for key in self.hash_dict:
            root_item = QTreeWidgetItem()
            root_item.setText(0, key)
            for i in self.hash_dict[key]:
                item = QTreeWidgetItem()
                item.setText(0, i)
                root_item.addChild(item)
            items_lst.append(root_item)
        self.tree.addTopLevelItems(items_lst)
        self.tree.itemDoubleClicked.connect(self.double_click_on_item)

    def double_click_on_item(self, item): # ОТКРЫВАЕТ ЗАМЕТКУ ПРИ ДВОЙНОМ КЛИКЕ В ЛЕВОЙ МЕНЮХЕ
        name = item.text(0)
        for note in self.notes_dict_list:
            print(note)
            if note["name"] == str(name):
                print(note["name"])
                self.show_note_doc("Note"+str(note["number"]))

    @pyqtSlot(str)
    def func_active_note(self, note_name): # МЕНЯЕТ АКТИВНУЮ ЗАМЕТКУ
        self.active_note_name = str(note_name)

    @pyqtSlot()
    def cycle_all_notes(self):  # ПРОХОДИТСЯ ЦИКЛОМ ПО ВСЕМ ЗАМЕТКАМ
        for note in self.notes_dict_list:
            self.show_note_btn("Note" + str(note["number"]))

    @pyqtSlot(str)
    def show_note_btn(self, note):  # ОТОБРАЖАЕТ И АКТИВИРУЕТ КНОПКУ
        note_btn = MyPushButton(self.notes_dict_list[int(note[4:])-1]["name"])
        self.mainbox.addWidget(note_btn)
        note_btn.left_click.connect(lambda: self.show_note_doc(note))
        note_btn.right_click.connect(lambda: self.context_menu(note_btn, note, self.notes_dict_list[int(note[4:])-1]["hashtag"]))
        note_btn.left_click.connect(lambda: self.func_active_note(note))
        note_btn.left_click.connect(lambda: self.note_name_func(note))
        # note_btn.clicked.connect(self.show_note_img)

    @pyqtSlot(str)
    def note_name_func(self, note): # ОТОБРАЖАЕТ ИМЯ ЗАМЕТКИ
        name = self.notes_dict_list[int(note[4:])-1]["name"]
        self.note_name.setText(name)

    @pyqtSlot(str)
    def show_note_doc(self, note):  # СОЗДАЕТ ТЕСТОВОЕ ПОЛЕ QTEXTDOCUMENT И АКТИВИРУЕТ СОХРАНЕНИЕ
        note_doc = QTextDocument()
        note_doc.setPlainText(self.open_text("\\" + note + ".json"))
        self.textedit.setDocument(note_doc)
        self.textedit.setFocus() # устанавливает курсор в текстовое поле
        self.date_lbl.setText("Last Edit: " + self.notes_dict_list[int(note[4:]) - 1]["date"])
        note_doc.contentsChanged.connect(lambda: self.save_text(note))

    @pyqtSlot()
    def show_note_img(self): #ПОКАЗЫВАЕТ ЗАГРУЖЕННЫЕ РАНЕЕ КАРТИНКИ
        note = self.active_note_name
        label = QLabel()
        pixmap = QPixmap(self.open_img("\\" + note + ".json"))
        pixmap_resized = pixmap.scaled(100, 100, Qt.KeepAspectRatio)
        label.setPixmap(pixmap_resized)
        self.mainbox.addWidget(label)

    @pyqtSlot(str)
    def open_img(self, file): # ОТКРЫВАЕТ КАРТИНКУ
        json_data = json.load(open(self.path + file, 'r'))
        jtopy = json.dumps(json_data)
        return json.loads(jtopy)["images"]

    @pyqtSlot()
    def show_main_note(self):  # ВОЗВРАЩАЕТ К ГЛАВНОЙ ЗАМЕТКЕ
        main_txtEdit = QTextDocument()
        main_txtEdit.setPlainText(self.open_text(r'\MainNote.json'))
        self.textedit.setDocument(main_txtEdit)
        self.textedit.setFocus() # устанавливает курсор в текстовое поле
        self.note_name.setText("MainNote")
        self.date_lbl.setText("Last Edit: " + self.main_dict["date"])
        main_txtEdit.contentsChanged.connect(lambda: self.save_text(r'\MainNote.json'))

    @pyqtSlot(str)
    def save_text(self, file):  # УНИВЕРСАЛЬНАЯ СОХРАНЯЛКА JSON ФАЙЛОВ
        text = self.textedit.toPlainText()
        if file[:4] == "Note":
            self.notes_dict_list[int(file[4:])-1]["text"] = text
            self.notes_dict_list[int(file[4:]) - 1]["date"] = self.note_date_func()
            with open(self.path + "\\" + file + ".json", 'w') as f:
                json.dump(self.notes_dict_list[int(file[4:])-1], f)
        else:
            self.main_dict["text"] = text
            self.main_dict["date"] = self.note_date_func()
            with open(self.path + file, 'w') as f:
                json.dump(self.main_dict, f)

    def create_main_file(self):  # СОЗДАНИЕ ГЛАВНОЙ ЗАМЕТКИ
        text = '{{"text": "", "images": "", "date": "{}"}}'.format(self.note_date_func())
        with open(self.path + r'\MainNote.json', 'w+') as f:
            f.write(text)

    @pyqtSlot(str)
    def open_text(self, file):  # УНИВЕРСАЛЬНАЯ ОТКРЫВАЛКА JSON ФАЙЛОВ
        json_data = json.load(open(self.path + file, 'r'))
        jtopy = json.dumps(json_data)
        return json.loads(jtopy)["text"]

    @pyqtSlot()
    def new_note(self):  # СОЗДАНИЕ НОВОЙ КНОПКИ ЗАМЕТКИ
        self.notes_count += 1
        
        # ввод названия заметки
        name, ok = QInputDialog.getText(self, "Naming", "Enter name", text="NoName"+str(self.notes_count))
        new_note_name = None
        if ok and name != "":
            new_note_name = str(name)
        elif ok and name == "":
            new_note_name = "NoName" + str(self.notes_count)
        else:
            return None
        
        # ввод названия категории
        text, ok = QInputDialog.getText(self, "Hashtag", "Enter hashtag", text="#noname")
        new_note_hashtag = None
        if ok and text != "":
            text = text.replace(" ", "")
            text = text.lower()
            if text[0] != "#":
                text = "#" + text
            new_note_hashtag = str(text)
        else:
            new_note_hashtag = "#noname"

        new_note_btn = MyPushButton(new_note_name)

        # Создание заметки в левой менюшке
        if not new_note_hashtag in self.hash_dict:
            self.hash_dict[new_note_hashtag] = [new_note_name]
            new_root_item = QTreeWidgetItem()
            new_root_item.setText(0, new_note_hashtag)
            new_item = QTreeWidgetItem()
            new_item.setText(0, new_note_name)
            new_root_item.addChild(new_item)
            self.tree.addTopLevelItem(new_root_item)
            self.tree.itemDoubleClicked.connect(self.double_click_on_item)
        else:
            self.hash_dict["{}".format(new_note_hashtag)].append("{}".format(new_note_name))
            print(self.hash_dict)
            self.tree.clear()
            self.cycle_for_items()

        new_note_dict = {"name": new_note_name, "text": "", "images": "", "number": self.notes_count,
                         "date": self.note_date_func(), "hashtag": new_note_hashtag}
        self.notes_dict_list.append(new_note_dict)

        new_note_btn.left_click.connect(lambda: self.show_note_doc('Note' + str(new_note_dict["number"])))
        new_note_btn.right_click.connect(lambda: self.context_menu(new_note_btn, 'Note' + str(new_note_dict["number"]), new_note_hashtag))
        new_note_btn.left_click.connect(lambda: self.func_active_note('Note' + str(new_note_dict["number"])))
        new_note_btn.left_click.connect(lambda: self.note_name_func('Note' + str(new_note_dict["number"])))
        # new_note_btn.clicked.connect(self.show_note_img)

        text = '{{"name": "{}", "text": "", "images": "", "number": {}, "date": "{}", "hashtag": "{}"}}'.format(
            new_note_name, self.notes_count,self.note_date_func(), new_note_hashtag)

        with open(self.path + r'\Note' + str(self.notes_count) + '.json', 'w+') as f:
            f.write(text)
        self.mainbox.addWidget(new_note_btn)

    def err_signal(self): # ЭТО ДЛЯ ПОИСКА МЕСТА ОШИБКИ
        print('error тут')

    @pyqtSlot("QPushButton", str)
    def context_menu(self, note_btn, note, note_hashtag): # СОЗДАЕТ КОНТЕКСТНОЕ МЕНЮ
        #---Контекстное меню---
        note_btn.setContextMenuPolicy(Qt.CustomContextMenu)
        self.menu = QMenu()

        removeAct = QAction('Delete', self)
        removeAct.triggered.connect(lambda: self.note_del(index = int(note[4:])-1, note_btn = note_btn, note_hashtag = note_hashtag))
        renameAct = QAction('Rename', self)
        renameAct.triggered.connect(lambda: self.rename_note(note, note_btn, note_hashtag))

        self.menu.addAction(removeAct)
        self.menu.addAction(renameAct)
        self.menu.addSeparator() # вообще не знаю че это даже не смотри

        note_btn.customContextMenuRequested.connect(lambda: self.show_context_menu())

    @pyqtSlot()
    def show_context_menu(self): # ОТОБРАЖАЕТ КОНТЕКСТНОЕ МЕНЮ
        # Показываем меню и выбираем ему место
        self.menu.exec_(QCursor.pos())

    @pyqtSlot(str, "QPushButton")
    def rename_note(self, note, note_btn, note_hashtag): # ПЕРЕИМЕНОВАНИЕ ЗАМЕТКИ
        # пользователь вводит новое название заметки
        text, ok = QInputDialog.getText(self, "Naming", "Enter name", text="NoName")

        if ok and text != "":
            note_name = str(text)
        else:
            note_name = "NoName"

        # переименовываем заметки в левом меню
        index = int(note[4:]) - 1
        for i in range(len(self.hash_dict[note_hashtag])):
            if self.hash_dict[note_hashtag][i] == self.notes_dict_list[index]["name"]:
                self.hash_dict[note_hashtag][i] = note_name
        self.tree.clear()
        self.cycle_for_items()

        # меняем название в словаре
        self.notes_dict_list[index]["name"] = note_name
        # меняем название в json файле
        with open(self.path + "\\" + note + ".json", 'w') as f:
            json.dump(self.notes_dict_list[index], f)

        note_btn.setText(note_name) # устанавливаем текст на кнопку
        self.note_name_func(note)   # устанавливаем название на label сверху
        self.show_note_doc(note)    # открываем заметку
        self.notes_dict_list[index]["date"] = self.note_date_func() # устанавливаем время изменения заметки

        self.menu.setVisible(False) # делает меню невидимым

    @pyqtSlot("QPushButton", int)
    def note_del(self, note_btn, index, note_hashtag): # УДАЛЯЕТ ПОДЗАМЕТКУ
        from shutil import move
        
        # удаляет заметку из левой менюшки
        for note in self.hash_dict[note_hashtag]:
            if note == self.notes_dict_list[index]["name"]:
                self.hash_dict[note_hashtag].remove(note)

        if self.hash_dict[note_hashtag] == []:
            del self.hash_dict[note_hashtag]

        self.tree.clear()
        self.cycle_for_items()

        #удаляем виджет кнопки, json файл и заметку из списков, уменьшаем количество заметок
        note_btn.deleteLater()
        self.notes_dict_list.pop(index)
        self.notes_count = self.notes_count - 1
        os.remove(self.path + r"\Note" + str(index+1) + ".json")

        #открываем главную заметку
        self.show_main_note()

        # перенумеруем заметки в списке (-1)
        for note_dict in self.notes_dict_list[index:]:
            print("note_dict:", note_dict)
            note_dict["number"] = note_dict["number"] - 1
            print("note_dict['number']:", note_dict["number"])
            with open(self.path + r"\Note" + str(note_dict["number"]+1) + ".json", 'w+') as f:
                json.dump(note_dict, f)

        #переименуем файлы json (-1)
        i = index + 2
        while os.path.exists(self.path + r"\Note" + str(i) + ".json"):
            move(self.path + r"\Note" + str(i) + ".json", self.path + r"\Note" + str(i-1) + ".json")
            i += 1

        self.menu.setVisible(False) # делает меню невидимым

    @pyqtSlot(str)
    def add_img(self, file): # ДОБАВЛЯЕТ КАРТИНКУ В АКТИВНУЮ ЗАМЕТКУ
        path, filter = QFileDialog.getOpenFileName()
        if file == 'MainNote':
            self.main_dict["images"] = path
            with open(self.path + '\\' + file + '.json', 'w') as f:
                json.dump(self.main_dict, f)
        else:
            index = int(file[4:])-1
            self.notes_dict_list[index]["images"] = path
            with open(self.path + '\\' + file + '.json', 'w') as f:
                json.dump(self.notes_dict_list[index], f)
        label = QLabel()
        pixmap = QPixmap(path)
        pixmap_resized = pixmap.scaled(100, 100, Qt.KeepAspectRatio)
        label.setPixmap(pixmap_resized)
        self.mainbox.addWidget(label)

    def note_date_func(self): # ВОЗВРАЩАЕТ ТЕКУЩЕЕ ВРЕМЯ В ВИДЕ СТРОКИ
        import datetime
        time_now = str(datetime.datetime.now())[:19]
        # year = time_now[:4]
        # month = time_now[4:7]
        # day = time_now[7:10]
        # hours = time_now[11:13]
        # minutes = time_now[13:16]
        # seconds = time_now[16:19]
        return time_now

    @pyqtSlot()
    def add_table(self):

        table = QTableWidget(self)  # Создаем таблицу

        columns, ok = QInputDialog.getInt(self, 'Input Dialog', 'Enter the number of columns: ')
        if ok:
            table.setColumnCount(columns)  # Устанавливаем кол-во столбцов

        rows, ok = QInputDialog.getInt(self, 'Input Dialog', 'Enter the number of rows: ')
        if ok:
            table.setRowCount(rows)  # Устанавливаем кол-во строк

        # Устанавливаем заголовки таблицы
        headers = []
        for i in range(columns):
            headers.append('Header %s' % (i + 1))

        table.setHorizontalHeaderLabels(headers)

        # Устанавливаем всплывающие подсказки на заголовки
        for i in range(columns):
            table.horizontalHeaderItem(i).setToolTip('Column %s' % (i + 1))

        # Устанавливаем выравнивание на заголовки
        for i in range(columns):
            table.horizontalHeaderItem(i).setTextAlignment(Qt.AlignHCenter)

        # заполняем первую строку
        for i in range(columns):
            table.setItem(0, i, QTableWidgetItem('Text in column %s' % (i + 1)))

        # делаем ресайз колонок по содержимому
        table.resizeColumnsToContents()

        table.doubleClicked.connect(self.on_click)  # пока ничего не делает

        self.mainbox.addWidget(table)  # Добавляем таблицу в сетку

    def on_click(self):
        pass


if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.processEvents()

    # DESIGN
    app.setStyle("Fusion")
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor(53, 53, 53))
    palette.setColor(QPalette.WindowText, Qt.white)
    palette.setColor(QPalette.Base, QColor(25, 25, 25))
    palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
    palette.setColor(QPalette.ToolTipBase, Qt.white)
    palette.setColor(QPalette.ToolTipText, Qt.white)
    palette.setColor(QPalette.Text, Qt.white)
    palette.setColor(QPalette.Button, QColor(53, 53, 53))
    palette.setColor(QPalette.ButtonText, Qt.white)
    palette.setColor(QPalette.BrightText, Qt.red)
    palette.setColor(QPalette.Link, QColor(42, 130, 218))
    palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
    palette.setColor(QPalette.HighlightedText, Qt.black)
    app.setPalette(palette)

    demo = Notes()
    demo.show()
    sys.exit(app.exec_())
