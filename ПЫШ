import sys, os, json
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *

# ----
class Notes(QWidget):
    def __init__(self):
        super(Notes, self).__init__()

        # self.path = os.getcwd()
        self.path = r"D:\PROGRAMMING\Notes_App\directory_for_notes"
        if not os.path.exists(self.path + r"\MainNote.json"):
            self.create_main_file()

        json_data = json.load(open(self.path + r'\MainNote.json', 'r+'))  # считываем данные с json файла
        jtopy = json.dumps(json_data)
        self.main_dict = json.loads(jtopy)  # КЛАДЕМ ДАННЫЕ В СЛОВАРЬ ГЛАВНОЙ ЗАМЕТКИ

        self.notes_list = []  # СПИСОК С ЗАМЕТКАМИ
        i = 1
        while os.path.exists(self.path + r"\Note" + str(i) + ".json"):
            self.notes_list.append('Note' + str(i))
            i += 1

        self.notes_count = len(self.notes_list)  # КОЛИЧЕСТВО ЗАМЕТОК

        self.notes_dict_list = [] # СПИСОК СО СЛОВАРЯМИ, В КОТОРЫХ ЛЕЖАТ ДАННЫЕ О ЗАМЕТКАХ

        self.initUI()

    def initUI(self):

        # Размеры
        self.setWindowTitle('Note')
        self.setGeometry(300, 300, 600, 400)

        # Основная сетка
        self.mainbox = QGridLayout(self)
        self.setLayout(self.mainbox)
        self.textedit = QTextEdit()
        self.mainbox.addWidget(self.textedit)
        # Начальный документ
        doc = QTextDocument()
        doc.setPlainText(self.open_text(r"\MainNote.json"))
        doc.contentsChanged.connect(lambda: self.save_text(r"\MainNote.json"))
        self.textedit.setDocument(doc)

        # -----------------
        # Кнопки

        # Активная на данный момент заметка
        self.active_btn_note = 'MainNote'

        # Arrow
        arrowButton = QPushButton('Main Note')
        self.mainbox.addWidget(arrowButton)
        arrowButton.clicked.connect(lambda: self.show_main_note())
        arrowButton.clicked.connect(lambda: self.func_active_btn_note('MainNote'))

        # Plus
        plusButton = QPushButton('Plus')
        self.mainbox.addWidget(plusButton)
        plusButton.clicked.connect(lambda: self.new_note())
        plusButton.setShortcut("Ctrl+N")

        # Screpka
        screpButton = QPushButton('Screpka')
        self.mainbox.addWidget(screpButton)
        screpButton.clicked.connect(lambda: self.add_img(self.active_btn_note))

        # Запускаем цикл
        self.cycle_all_notes()

        self.show_note_img()


    def func_active_btn_note(self, note): #МЕНЯЕТ АКТИВНУЮ ЗАМЕТКУ
        self.active_btn_note = str(note)

    def cycle_all_notes(self):  # ПРОХОДИТСЯ ЦИКЛОМ ПО ВСЕМ ЗАМЕТКАМ
        for i in self.notes_list:
            self.show_note_btn(i)

    def show_note_btn(self, note):  # ОТОБРАЖАЕТ И АКТИВИРУЕТ КНОПКУ
        note_btn = QPushButton(str(note))
        self.mainbox.addWidget(note_btn)
        note_btn.clicked.connect(lambda: self.show_note_doc(note))
        note_btn.clicked.connect(lambda: self.func_active_btn_note(note))
        json_data = json.load(open(self.path + '\\' + note + '.json', 'r+'))  # считываем данные с json файла
        jtopy = json.dumps(json_data)
        self.notes_dict_list.append(json.loads(jtopy))  # кладем их в словарь

    def show_note_doc(self, note):  # СОЗДАЕТ ТЕСТОВОЕ ПОЛЕ QTEXTDOCUMENT И АКТИВИРУЕТ СОХРАНЕНИЕ
        note_doc = QTextDocument()
        note_doc.setPlainText(self.open_text("\\" + note + ".json"))
        self.textedit.setDocument(note_doc)
        note_doc.contentsChanged.connect(lambda: self.save_text('\\' + note + '.json'))

    def show_note_img(self): #ПОКАЗЫВАЕТ ЗАГРУЖЕННЫЕ РАНЕЕ КАРТИНКИ
        note = self.active_btn_note
        label = QLabel()
        pixmap = QPixmap(self.open_img("\\" + note + ".json"))
        pixmap_resized = pixmap.scaled(100, 100, Qt.KeepAspectRatio)
        label.setPixmap(pixmap_resized)
        self.mainbox.addWidget(label)

    def show_main_note(self):  # ВОЗВРАЩАЕТ К ГЛАВНОЙ ЗАМЕТКЕ
        main_txtEdit = QTextDocument()
        main_txtEdit.setPlainText(self.open_text(r'\MainNote.json'))
        self.textedit.setDocument(main_txtEdit)
        main_txtEdit.contentsChanged.connect(lambda: self.save_text(r'\MainNote.json'))

    @pyqtSlot(str)
    def save_text(self, file):  # УНИВЕРСАЛЬНАЯ СОХРАНЯЛКА JSON ФАЙЛОВ
        text = self.textedit.toPlainText()
        self.main_dict["text"] = text
        with open(self.path + file, 'w') as f:
            json.dump(self.main_dict, f)

    def create_main_file(self):  # СОЗДАНИЕ ГЛАВНОЙ ЗАМЕТКИ
        text = '{"text": "", "images": ""}'
        with open(self.path + r'\MainNote.json', 'w+') as f:
            f.write(text)

    def open_text(self, file):  # УНИВЕРСАЛЬНАЯ ОТКРЫВАЛКА JSON ФАЙЛОВ
        json_data = json.load(open(self.path + file, 'r'))
        jtopy = json.dumps(json_data)
        return json.loads(jtopy)["text"]

    def open_img(self, file): # ОТКРЫВАЕТ КАРТИНКУ
        json_data = json.load(open(self.path + file, 'r'))
        jtopy = json.dumps(json_data)
        return json.loads(jtopy)["images"]

    def new_note(self):  # СОЗДАНИЕ НОВОЙ КНОПКИ ЗАМЕТКИ
        self.notes_count += 1
        self.notes_list.append('Note' + str(self.notes_count))
        new_note_btn = QPushButton(self.notes_list[self.notes_count - 1])
        text = '{"text": "", "images": ""}'
        self.notes_dict_list.append(eval(text))
        with open(self.path + r'\Note' + str(self.notes_count) + '.json', 'w+') as f:
            f.write(text)
        self.mainbox.addWidget(new_note_btn)
        new_note_btn.clicked.connect(lambda: self.show_note_doc(self.notes_list[self.notes_count - 1]))
        new_note_btn.clicked.connect(lambda: self.func_active_btn_note(self.notes_list[self.notes_count - 1]))

    def add_img(self, file ): # ДОБАВЛЯЕТ КАРТИНКУ В АКТИВНУЮ ЗАМЕТКУ
        path, filter = QFileDialog.getOpenFileName()
        if file == 'MainNote':
            self.main_dict["images"] = path
            with open(self.path + '\\' + file + '.json', 'w') as f:
                json.dump(self.main_dict, f)
        else:
            index = int(file[4:])-1
            self.notes_dict_list[index]["images"] = path
            with open(self.path + '\\' + file + '.json', 'w') as f:
                json.dump(self.notes_dict_list[index], f)
        label = QLabel()
        pixmap = QPixmap(path)
        pixmap_resized = pixmap.scaled(100, 100, Qt.KeepAspectRatio)
        label.setPixmap(pixmap_resized)
        self.mainbox.addWidget(label)

if __name__ == '__main__':
    app = QApplication(sys.argv)

    # DESIGN
    app.setStyle("Fusion")
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor(53, 53, 53))
    palette.setColor(QPalette.WindowText, Qt.white)
    palette.setColor(QPalette.Base, QColor(25, 25, 25))
    palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
    palette.setColor(QPalette.ToolTipBase, Qt.white)
    palette.setColor(QPalette.ToolTipText, Qt.white)
    palette.setColor(QPalette.Text, Qt.white)
    palette.setColor(QPalette.Button, QColor(53, 53, 53))
    palette.setColor(QPalette.ButtonText, Qt.white)
    palette.setColor(QPalette.BrightText, Qt.red)
    palette.setColor(QPalette.Link, QColor(42, 130, 218))
    palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
    palette.setColor(QPalette.HighlightedText, Qt.black)
    app.setPalette(palette)

    demo = Notes()
    demo.show()
    sys.exit(app.exec_())
